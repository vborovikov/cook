/*
 * This file was generated by Spryer.Scripting 0.9.11-beta.9+main.18d69d1
 * https://github.com/vborovikov/spryer
 *
 * Generated: 2025-03-15 16:23:18
 * Source: Scripts.sql 0.2.1
 * Scripts: 16
 */

namespace Sage.Web.Data;

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using Dapper;
using Spryer;
using Pantry;

internal static partial class ScriptsSqlExtensions
{
    private static readonly DbScriptMap sql;

    static ScriptsSqlExtensions()
    {
        sql = DbScriptMap.Load("Scripts.sql");
    }

    public static Task<T?> GetRecipeByIdAsync<T>(this DbConnection connection,
        Guid? recipeId,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryJsonAsync<T>(sql["GetRecipeById"],
            param: new
            {
                RecipeId = recipeId
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T> GetImportedRecipeByIdAsync<T>(this DbConnection connection,
        Guid? recipeId,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryFirstAsync<T>(sql["GetImportedRecipeById"],
            param: new
            {
                RecipeId = recipeId
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> ImportRecipeAsync(this DbConnection connection,
        Guid? id, string? name, string? description, string? instructions, bool isParsed, string? content, string? link,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["ImportRecipe"],
            param: new
            {
                Id = id,
                Name = name.AsNVarChar(100),
                Description = description.AsNVarChar(500),
                Instructions = instructions.AsNVarChar(),
                IsParsed = isParsed,
                Content = content.AsNVarChar(),
                Link = link.AsNVarChar(850)
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> ImportRecipeAsync(this DbTransaction transaction,
        Guid? id, string? name, string? description, string? instructions, bool isParsed, string? content, string? link,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return ImportRecipeAsync(transaction.Connection!,
            id, name, description, instructions, isParsed, content, link,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> DiscardIngredientsAsync(this DbConnection connection,
        Guid? recipeId,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["DiscardIngredients"],
            param: new
            {
                RecipeId = recipeId
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> DiscardIngredientsAsync(this DbTransaction transaction,
        Guid? recipeId,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return DiscardIngredientsAsync(transaction.Connection!,
            recipeId,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateImportedRecipeAsync(this DbConnection connection,
        Guid? recipeId, string? name, string? description, string? instructions, bool isParsed, string? content, string? link,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["UpdateImportedRecipe"],
            param: new
            {
                RecipeId = recipeId,
                Name = name.AsNVarChar(100),
                Description = description.AsNVarChar(500),
                Instructions = instructions.AsNVarChar(),
                IsParsed = isParsed,
                Content = content.AsNVarChar(),
                Link = link.AsNVarChar(850)
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateImportedRecipeAsync(this DbTransaction transaction,
        Guid? recipeId, string? name, string? description, string? instructions, bool isParsed, string? content, string? link,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return UpdateImportedRecipeAsync(transaction.Connection!,
            recipeId, name, description, instructions, isParsed, content, link,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> StoreIngredientsAsync<T>(this DbConnection connection,
        string? description, Measure number, Fractional numberValue, DbEnum<MeasurementType>? numberUnit, Measure quantity, Fractional quantityValue, DbEnum<MeasurementType>? quantityUnit, Measure altQuantity, Fractional altQuantityValue, DbEnum<MeasurementType>? altQuantityUnit,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteScalarAsync<T>(sql["StoreIngredients"],
            param: new
            {
                Description = description.AsNVarChar(100),
                Number = number,
                NumberValue = numberValue,
                NumberUnit = numberUnit,
                Quantity = quantity,
                QuantityValue = quantityValue,
                QuantityUnit = quantityUnit,
                AltQuantity = altQuantity,
                AltQuantityValue = altQuantityValue,
                AltQuantityUnit = altQuantityUnit
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> StoreIngredientsAsync<T>(this DbTransaction transaction,
        string? description, Measure number, Fractional numberValue, DbEnum<MeasurementType>? numberUnit, Measure quantity, Fractional quantityValue, DbEnum<MeasurementType>? quantityUnit, Measure altQuantity, Fractional altQuantityValue, DbEnum<MeasurementType>? altQuantityUnit,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return StoreIngredientsAsync<T>(transaction.Connection!,
            description, number, numberValue, numberUnit, quantity, quantityValue, quantityUnit, altQuantity, altQuantityValue, altQuantityUnit,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> StoreRecipeIngredientsAsync(this DbConnection connection,
        Guid? recipeId, Guid? ingredientId, byte turn,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["StoreRecipeIngredients"],
            param: new
            {
                RecipeId = recipeId,
                IngredientId = ingredientId,
                Turn = turn
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> StoreRecipeIngredientsAsync(this DbTransaction transaction,
        Guid? recipeId, Guid? ingredientId, byte turn,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return StoreRecipeIngredientsAsync(transaction.Connection!,
            recipeId, ingredientId, turn,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> EditRecipeByIdAsync<T>(this DbConnection connection,
        Guid? recipeId,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryJsonAsync<T>(sql["EditRecipeById"],
            param: new
            {
                RecipeId = recipeId
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> GetFoodsByNameAsync<T>(this DbConnection connection,
        string? name,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryJsonAsync<T>(sql["GetFoodsByName"],
            param: new
            {
                Name = name.AsNVarChar(50)
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateRecipeDetailsAsync(this DbConnection connection,
        Guid? id, string? name, string? description, string? instructions,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["UpdateRecipeDetails"],
            param: new
            {
                Id = id,
                Name = name.AsNVarChar(100),
                Description = description.AsNVarChar(500),
                Instructions = instructions.AsNVarChar()
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateRecipeDetailsAsync(this DbTransaction transaction,
        Guid? id, string? name, string? description, string? instructions,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return UpdateRecipeDetailsAsync(transaction.Connection!,
            id, name, description, instructions,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateIngredientAsync(this DbConnection connection,
        Guid? id, string? description, Measure number, Fractional numberValue, DbEnum<MeasurementType>? numberUnit, Measure quantity, Fractional quantityValue, DbEnum<MeasurementType>? quantityUnit, Measure altQuantity, Fractional altQuantityValue, DbEnum<MeasurementType>? altQuantityUnit,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["UpdateIngredient"],
            param: new
            {
                Id = id,
                Description = description.AsNVarChar(100),
                Number = number,
                NumberValue = numberValue,
                NumberUnit = numberUnit,
                Quantity = quantity,
                QuantityValue = quantityValue,
                QuantityUnit = quantityUnit,
                AltQuantity = altQuantity,
                AltQuantityValue = altQuantityValue,
                AltQuantityUnit = altQuantityUnit
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> UpdateIngredientAsync(this DbTransaction transaction,
        Guid? id, string? description, Measure number, Fractional numberValue, DbEnum<MeasurementType>? numberUnit, Measure quantity, Fractional quantityValue, DbEnum<MeasurementType>? quantityUnit, Measure altQuantity, Fractional altQuantityValue, DbEnum<MeasurementType>? altQuantityUnit,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return UpdateIngredientAsync(transaction.Connection!,
            id, description, number, numberValue, numberUnit, quantity, quantityValue, quantityUnit, altQuantity, altQuantityValue, altQuantityUnit,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> DeleteIngredientFoodsAsync(this DbConnection connection,
        Guid? id,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["DeleteIngredientFoods"],
            param: new
            {
                Id = id
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> DeleteIngredientFoodsAsync(this DbTransaction transaction,
        Guid? id,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return DeleteIngredientFoodsAsync(transaction.Connection!,
            id,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> AddFoodAsync<T>(this DbConnection connection,
        string? name, string? shortName,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteScalarAsync<T>(sql["AddFood"],
            param: new
            {
                Name = name.AsNVarChar(50),
                ShortName = shortName.AsNVarChar(50)
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<T?> AddFoodAsync<T>(this DbTransaction transaction,
        string? name, string? shortName,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return AddFoodAsync<T>(transaction.Connection!,
            name, shortName,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> ConnectIngredientFoodAsync(this DbConnection connection,
        Guid? ingredientId, Guid? foodId,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.ExecuteAsync(sql["ConnectIngredientFood"],
            param: new
            {
                IngredientId = ingredientId,
                FoodId = foodId
            },
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<int> ConnectIngredientFoodAsync(this DbTransaction transaction,
        Guid? ingredientId, Guid? foodId,
        int? commandTimeout = null, CommandType? commandType = null)
    {
        return ConnectIngredientFoodAsync(transaction.Connection!,
            ingredientId, foodId,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<IEnumerable<T>> SearchRecipesFullTextAsync<T>(this DbConnection connection,
        object parameters,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryAsync<T>(sql["SearchRecipesFullText"],
            param: parameters,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }

    public static Task<IEnumerable<T>> SearchRecipesAsync<T>(this DbConnection connection,
        object parameters,
        IDbTransaction? transaction = null, int? commandTimeout = null, CommandType? commandType = null)
    {
        return connection.QueryAsync<T>(sql["SearchRecipes"],
            param: parameters,
            transaction: transaction, commandTimeout: commandTimeout, commandType: commandType);
    }
}
